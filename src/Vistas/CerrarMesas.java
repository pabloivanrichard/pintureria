/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Vistas;

import Controladores.AlmacenJpaController;
import Controladores.Cuenta_ClienteJpaController;
import Controladores.DetalleTicketCocinaJpaController;
import Controladores.LocalizacionJpaController;
import Controladores.MesaJpaController;
import Controladores.PagoClienteJpaController;
import Controladores.ProductoCompuestoJpaController;
import Controladores.ServicioMesaJpaController;
import Controladores.TicketCocinaJpaController;
import Controladores.VentaJpaController;
import Controladores.exceptions.NonexistentEntityException;
import Entidades.Almacen;
import Entidades.Cliente;
import Entidades.Cuenta_Cliente;
import Entidades.Datos_Contado;
import Entidades.Datos_Cuenta_Corriente;
import Entidades.Datos_Tarjeta;
import Entidades.Datos_cheque;
import Entidades.DetalleServicioMesa;
import Entidades.DetalleTicketCocina;
import Entidades.Detalle_Cuenta_Cliente;
import Entidades.Detalle_Venta;
import Entidades.Detalle_tipo_venta;
import Entidades.Localizacion;
import Entidades.Mesa;
import Entidades.PagoCliente;
import Entidades.Producto;
import Entidades.ProductoCompuesto;
import Entidades.ServicioMesa;
import Entidades.TicketCocina;
import Entidades.Tipo_Pago;
import Entidades.Tipo_Venta;
import Entidades.Venta;
import Facade.FacadeAlmacen;
import Facade.FacadeCliente;
import Facade.FacadeCuentaCliente;
import Facade.FacadeLocalizacion;
import Facade.FacadeProducto;
import Facade.FacadeProductoCombinado;
import Reportes.Reporte;
import static Vistas.JfVenta.tipopago;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import org.jfree.data.time.Hour;

/**
 *
 * @author Pablo
 */
public class CerrarMesas extends javax.swing.JDialog {
    Mesa mesa;
    ServicioMesa servicio;
    ProductoCompuesto prodcomp;
DefaultTableModel modelo2=new DefaultTableModel();
int validaContenido;
List<String> listadescripcion=new ArrayList<>();
List<String> listadescripcion1=new ArrayList<>();
Cliente cliente;
List<Datos_cheque> listacheques=new ArrayList<Datos_cheque>();
List<Datos_Tarjeta> listatar=new ArrayList<Datos_Tarjeta>();
List<Datos_Cuenta_Corriente> listacuentac=new ArrayList<Datos_Cuenta_Corriente>();
Datos_Contado contado=new Datos_Contado();
int facturaemitida=0;
Venta ventag=new Venta();
List<DetalleTicketCocina> ldc=new ArrayList<>();
Long idTicketCocina;
float cantidadmaxima=0;
 Almacen productoAlmacen;
 int escompuesto=0;
   
    /**
     * Creates new form CerrarMesas
     */
    public CerrarMesas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
     public CerrarMesas(java.awt.Frame parent, boolean modal,Mesa m, ServicioMesa ser) {
        super(parent, modal);
        initComponents();
        mesa=m;
        servicio=ser;
        incializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel1.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel3.text")); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextField2.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField2.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel4.text")); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar2.png"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField3.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField3.text")); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar2.png"))); // NOI18N
        jButton2.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jCheckBox1.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel6.text")); // NOI18N

        jTextField4.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField4.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel7.text")); // NOI18N

        jTextField5.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField5.text")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel8.text")); // NOI18N

        jTextField6.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField6.text")); // NOI18N
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        jButton4.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/delete.png"))); // NOI18N
        jButton5.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton5.text")); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel9.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel9.text")); // NOI18N

        jLabel12.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel12.text")); // NOI18N

        jTextField8.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField8.text")); // NOI18N

        jLabel13.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel13.text")); // NOI18N

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONTADO", "TARJETA", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 857, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/aceptar.png"))); // NOI18N
        jButton6.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton6.text")); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/back.png"))); // NOI18N
        jButton7.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton7.text")); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/close.png"))); // NOI18N
        jButton8.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton8.text")); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cocina.png"))); // NOI18N
        jButton9.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton9.text")); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/new_page.png"))); // NOI18N
        jButton10.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jButton10.text")); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jButton6)
                .addGap(48, 48, 48)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jButton8)
                .addGap(38, 38, 38)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jLabel10.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel10.text")); // NOI18N

        jTextField7.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jTextField7.text")); // NOI18N

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jLabel11.setText(org.openide.util.NbBundle.getMessage(CerrarMesas.class, "CerrarMesas.jLabel11.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7)
                        .addGap(53, 53, 53)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(81, 81, 81)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addGap(306, 306, 306)
                                    .addComponent(jButton4)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton5)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1)
                    .addComponent(jLabel10)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //if(Menu.opcion==1){   
        if(cliente!=null){    
            try {
                //  if(jComboBox1.getSelectedItem().equals("TARJETA")){
                EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
                Venta venta=new Venta();
                venta.setFecha(jXDatePicker1.getDate());
                Date hora=new Date();
                venta.setHora(hora);
                venta.setCliente(cliente);
                venta.setMonto(Float.parseFloat(jTextField8.getText()));
                venta.setAnulacion("NO");
                venta.setPagoRegistrado("SI");
                //venta.setPagoRegistrado("NO");
                venta.setUsu(JLogin.usu);
                venta.setMozo(servicio.getMozo());
                venta.setIdservicio(servicio.getId());
                //venta.setPorcentaje_descuento(Integer.parseInt(jTextField6.getText()));
                //venta.setDescripcion(jComboBox1.getSelectedItem().toString());
                /// cargar detalle de Venta
                ArrayList<Detalle_Venta> ldv = new ArrayList<Detalle_Venta>();
                for(int i=0; i< jTable2.getRowCount(); i++ ){
                    Detalle_Venta dv=new Detalle_Venta();
                    if(jTable2.getValueAt(i, 6).toString().equals("SI")){
                        List<ProductoCompuesto> lp=new FacadeProductoCombinado().buscarxCod(Long.parseLong(jTable2.getValueAt(i, 0).toString()));
                        dv.setProductocompuesto(lp.get(0));
                    }
                    if(jTable2.getValueAt(i, 6).toString().equals("NO")){
                        List<Producto> lp=new FacadeProducto().buscarxnombre(String.valueOf(jTable2.getValueAt(i, 1)).toUpperCase());
                        dv.setProducto(lp.get(0));
                    }
                    dv.setCantidad(Integer.parseInt(jTable2.getValueAt(i, 4).toString()));
                    dv.setMonto(Float.valueOf(jTable2.getValueAt(i, 3).toString()));
                    ldv.add(dv);
                }
                venta.setDetalle_venta(ldv);
                //llenar Tipo de venta
                Tipo_Venta tv= new Tipo_Venta();
                /*tv.setAnticipo(Float.parseFloat(jTextField15.getText()));
                tv.setCant_cuotas(Integer.parseInt(jTextField8.getText()));
                tv.setTipo(jComboBox1.getSelectedItem().toString());
                tv.setTajeta(tarjeta);
                tv.setDescuento(tarjeta.getDescuento());*/
                //llenar tipo de pago
                tipopago=new Tipo_Pago();
                //modifique para jimi comente y deje solo contado
                //int tamaniolc=listacheques.size();
                //if(tamaniolc!=0){
                //tipopago.setCheques(listacheques);
                //}
                //if(contado!=null){
                //tipopago.setContado(contado);
                //}
                //int tamaniocc=listacuentac.size();
                //if(tamaniocc!=0){
                //tipopago.setCuentacorrientes(listacuentac);
                //}
                //int tamaniot=listatar.size();
                //if(tamaniot!=0){
                //tipopago.setTarjetas(listatar);
                //}
                if(!jTextField8.equals("")){
                    contado.setEntrega(Float.parseFloat(jTextField8.getText()));
                    tipopago.setContado(contado);
                }
                //hasta aca
                //Agrego para jimmi lo del combo
                venta.setDescripcion(jComboBox2.getSelectedItem().toString());
                tv.setTipo_pago(tipopago);
                ArrayList<Detalle_tipo_venta> ldtv=new ArrayList<Detalle_tipo_venta>();
                
                //llenar detalle tipo de venta
                /* for(int i=0; i< jTable3.getRowCount();i++){
                try {
                Detalle_tipo_venta dtv=new Detalle_tipo_venta();
                dtv.setNro_cuota(Integer.parseInt(jTable3.getValueAt(i, 0).toString()));
                //dtv.setFecha_pago();
                SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
                Date nuevaFecha = null;
                nuevaFecha = formatoFecha.parse(jTable3.getValueAt(i,1).toString());
                dtv.setFecha_pago(nuevaFecha);
                dtv.setMonto(Float.parseFloat(jTable3.getValueAt(i, 2).toString()));
                dtv.setEstado(jTable3.getValueAt(i, 3).toString());
                ldtv.add(dtv);
                } catch (ParseException ex) {
                Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                tv.setDetalleTipoVenta(ldtv);*/
                venta.setTipoventa(tv);
                VentaJpaController vjp= new VentaJpaController(emf);
                vjp.create(venta);
                ventag=venta;
                // Modificar Almacen y los productos en el area
                for(int i=0; i< jTable2.getRowCount(); i++ ){
                    try {
                        if(jTable2.getValueAt(i,6).toString().equals("SI")){
                            List<ProductoCompuesto> lp=new FacadeProductoCombinado().buscarxCod(Long.parseLong(jTable2.getValueAt(i, 0).toString()));
                            ProductoCompuesto p=lp.get(0);
                            for(int j=0; j<p.getDetalle().size(); j++){
                                Almacen almacen= new Almacen();
                                //List<Almacen> la=new FacadeAlmacen().buscarxnombre(String.valueOf(jTable2.getValueAt(i, 1)).toUpperCase());
                                List<Almacen> la=new FacadeAlmacen().buscarxid(p.getDetalle().get(j).getProducto().getId());
                                almacen=la.get(0);
                                float cantalmacen=Float.parseFloat(la.get(0).getCantidad());
                                float cantvendida=Float.parseFloat(jTable2.getValueAt(i, 4).toString())* p.getDetalle().get(j).getCantidad();
                                almacen.setProducto(la.get(0).getProducto());
                                float cantidadtotal=cantalmacen-cantvendida;
                                if(cantidadtotal<=0){
                                    almacen.setCantidad("0");
                                }else{
                                    almacen.setCantidad(String.valueOf(cantalmacen-cantvendida));
                                    //System.out.println(la.get(0).getProducto()+"-"+String.valueOf(cantalmacen-cantvendida)+"-"+String.valueOf(cantvendida));
                                }
                                almacen.setAlerta(la.get(0).getAlerta());
                                almacen.setLocalizacion(la.get(0).getLocalizacion());
                                AlmacenJpaController ajp=new AlmacenJpaController(emf);
                                ajp.edit(almacen);
                                
                                Localizacion lo= new Localizacion();
                                // List<Localizacion> llo=new FacadeLocalizacion().buscarxdes(jTable2.getValueAt(i, 6).toString());
                                //List<Localizacion> llo=new FacadeLocalizacion().buscarxdes(jTable2.getValueAt(i, 6).toString(),jTable2.getValueAt(i, 0).toString());
                                
                                List<Localizacion> llo=new FacadeLocalizacion().buscarxdes(almacen.getLocalizacion(),String.valueOf(almacen.getId()));
                                lo=llo.get(0);
                                float cantidadlocal=lo.getCantidad();
                                lo.setCantidad(cantidadlocal-cantvendida);
                                LocalizacionJpaController ljc= new LocalizacionJpaController(emf);
                                ljc.edit(lo);
                                
                            }
                        }
                        
                        if(jTable2.getValueAt(i,6).toString().equals("NO")){
                            Almacen almacen= new Almacen();
                            //List<Almacen> la=new FacadeAlmacen().buscarxnombre(String.valueOf(jTable2.getValueAt(i, 1)).toUpperCase());
                            List<Almacen> la=new FacadeAlmacen().buscarxid(Long.parseLong(jTable2.getValueAt(i, 0).toString()));
                            almacen=la.get(0);
                            float cantalmacen=Float.parseFloat(la.get(0).getCantidad());
                            float cantvendida=Float.parseFloat(jTable2.getValueAt(i, 4).toString());
                            almacen.setProducto(la.get(0).getProducto());
                            almacen.setCantidad(String.valueOf(cantalmacen-cantvendida));
                            almacen.setAlerta(la.get(0).getAlerta());
                            almacen.setLocalizacion(la.get(0).getLocalizacion());
                            AlmacenJpaController ajp=new AlmacenJpaController(emf);
                            ajp.edit(almacen);
                            
                            Localizacion lo= new Localizacion();
                            // List<Localizacion> llo=new FacadeLocalizacion().buscarxdes(jTable2.getValueAt(i, 6).toString());
                            List<Localizacion> llo=new FacadeLocalizacion().buscarxdes(jTable2.getValueAt(i, 2).toString(),jTable2.getValueAt(i, 0).toString());
                            lo=llo.get(0);
                            float cantidadlocal=lo.getCantidad();
                            lo.setCantidad(cantidadlocal-cantvendida);
                            LocalizacionJpaController ljc= new LocalizacionJpaController(emf);
                            ljc.edit(lo);
                        }
                        
                        
                    } catch (NonexistentEntityException ex) {
                        Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                // Actualizar la Cuenta del cliente (se actualiza cuando el tipo de pago pertenece a Cuenta corriente)
                if(listacuentac.size()!=0){
                    try {
                        Cuenta_Cliente cuenta=new Cuenta_Cliente();
                        List<Cuenta_Cliente> lista=new FacadeCuentaCliente().buscarxdoc(cliente.getId());
                        cuenta=lista.get(0);
                        ArrayList<Detalle_Cuenta_Cliente> listacuenta=new ArrayList<Detalle_Cuenta_Cliente>();
                        //for(int i=0; i< jTable3.getRowCount();i++){
                        for(int i=0; i< 1;i++){
                            
                            Detalle_Cuenta_Cliente dtc=new Detalle_Cuenta_Cliente();
                            //dtc.setNro_cuota(Integer.parseInt(jTable3.getValueAt(i, 0).toString()));
                            dtc.setNro_cuota(listacuentac.get(i).getNro_cuota());
                            //dtv.setFecha_pago();
                            //SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
                            //Date nuevaFecha = null;
                            //nuevaFecha = formatoFecha.parse(jTable3.getValueAt(i,1).toString());
                            Date nuevaFecha = listacuentac.get(i).getFecha_pago();
                            dtc.setFecha_vencimiento(nuevaFecha);
                            //dtc.setMonto_cuota(Float.parseFloat(jTable3.getValueAt(i, 2).toString()));
                            dtc.setMonto_cuota(listacuentac.get(i).getMonto_cuota());
                            //dtc.setEstado(jTable3.getValueAt(i, 3).toString());
                            dtc.setEstado(listacuentac.get(i).getEstado());
                            dtc.setVenta(venta);
                            //dtc.setCantidad_cuota(Integer.parseInt(jTextField8.getText()));
                            dtc.setCantidad_cuota(listacuentac.get(i).getCantidad_cuotas());
                            //dtc.setTipo_pago(venta.getTipoventa().getTipo());
                            dtc.setTipo_pago("Cuenta Corriente");
                            dtc.setAnulacion("NO");
                            listacuenta.add(dtc);
                            
                        }
                        cuenta.setDetalle(listacuenta);
                        
                        Cuenta_ClienteJpaController ccjc=new Cuenta_ClienteJpaController(emf);
                        ccjc.edit(cuenta);
                    } catch (NonexistentEntityException ex) {
                        Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                // JfFactura ventana=new JfFactura();
                // ventana.setVisible(true);
                // }
                /*if(jComboBox1.getSelectedItem().equals("CONTADO")){
                EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
                Venta venta=new Venta();
                Calendar fecha = Calendar.getInstance();
                int dia=Integer.parseInt(jTextField12.getText());
                int mes=Integer.parseInt(jTextField13.getText());
                int año=Integer.parseInt(jTextField14.getText());
                fecha.set(año, mes-1, dia);
                Date fec=(Date)fecha.getTime();
                venta.setFecha(fec);
                venta.setCliente(cliente);
                venta.setMonto(Float.parseFloat(jTextField7.getText()));
                venta.setAnulacion("NO");
                venta.setDescripcion(jComboBox1.getSelectedItem().toString());
                /// cargar detalle de Venta
                ArrayList<Detalle_Venta> ldv = new ArrayList<Detalle_Venta>();
                for(int i=0; i< jTable2.getRowCount(); i++ ){
                Detalle_Venta dv=new Detalle_Venta();
                List<Producto> lp=new FacadeProducto().buscarxnombre(String.valueOf(jTable2.getValueAt(i, 1)).toUpperCase());
                dv.setProducto(lp.get(0));
                dv.setCantidad(Integer.parseInt(jTable2.getValueAt(i, 4).toString()));
                dv.setMonto(Float.valueOf(jTable2.getValueAt(i, 3).toString()));
                ldv.add(dv);
                }
                venta.setDetalle_venta(ldv);
                //llenar Tipo de venta
                Tipo_Venta tv= new Tipo_Venta();
                tv.setAnticipo(0);
                tv.setCant_cuotas(1);
                tv.setTipo(jComboBox1.getSelectedItem().toString());
                tv.setTajeta(null);
                //tv.setDescuento(null);
                
                ArrayList<Detalle_tipo_venta> ldtv=new ArrayList<Detalle_tipo_venta>();
                
                //llenar detalle tipo de venta
                for(int i=0; i< jTable3.getRowCount();i++){
                Detalle_tipo_venta dtv=new Detalle_tipo_venta();
                dtv.setNro_cuota(1);
                //dtv.setFecha_pago();
                SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
                Date nuevaFecha = null;
                nuevaFecha = fec;
                dtv.setFecha_pago(nuevaFecha);
                dtv.setMonto(Float.parseFloat(jTextField7.getText()));
                dtv.setEstado("SIN PAGAR");
                ldtv.add(dtv);
                
                }
                tv.setDetalleTipoVenta(ldtv);
                venta.setTipoventa(tv);
                VentaJpaController vjp= new VentaJpaController(emf);
                vjp.create(venta);
                
                // Modificar Almacen
                for(int i=0; i< jTable2.getRowCount(); i++ ){
                try {
                Almacen almacen= new Almacen();
                List<Almacen> la=new FacadeAlmacen().buscarxnombre(String.valueOf(jTable2.getValueAt(i, 1)).toUpperCase());
                almacen=la.get(0);
                int cantalmacen=Integer.parseInt(la.get(0).getCantidad());
                int cantvendida=Integer.parseInt(jTable2.getValueAt(i, 4).toString());
                almacen.setProducto(la.get(0).getProducto());
                almacen.setCantidad(String.valueOf(cantalmacen-cantvendida));
                almacen.setAlerta(la.get(0).getAlerta());
                almacen.setAlerta(la.get(0).getLocalizacion());
                AlmacenJpaController ajp=new AlmacenJpaController(emf);
                ajp.edit(almacen);
                } catch (NonexistentEntityException ex) {
                Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                // Actualizar la Cuenta del cliente (se actualiza cuando el tipo de pago pertenece a tarjeta)
                if(jComboBox1.getSelectedItem().equals("TARJETA")){
                try {
                Cuenta_Cliente cuenta=new Cuenta_Cliente();
                List<Cuenta_Cliente> lista=new FacadeCuentaCliente().buscarxdoc(cliente.getId());
                cuenta=lista.get(0);
                ArrayList<Detalle_Cuenta_Cliente> listacuenta=new ArrayList<Detalle_Cuenta_Cliente>();
                //for(int i=0; i< jTable3.getRowCount();i++){
                for(int i=0; i< 1;i++){
                try {
                Detalle_Cuenta_Cliente dtc=new Detalle_Cuenta_Cliente();
                dtc.setNro_cuota(Integer.parseInt(jTable3.getValueAt(i, 0).toString()));
                //dtv.setFecha_pago();
                SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
                Date nuevaFecha = null;
                nuevaFecha = formatoFecha.parse(jTable3.getValueAt(i,1).toString());
                dtc.setFecha_vencimiento(nuevaFecha);
                dtc.setMonto_cuota(Float.parseFloat(jTable3.getValueAt(i, 2).toString()));
                dtc.setEstado(jTable3.getValueAt(i, 3).toString());
                dtc.setVenta(venta);
                dtc.setCantidad_cuota(Integer.parseInt(jTextField8.getText()));
                dtc.setTipo_pago(venta.getTipoventa().getTipo());
                dtc.setAnulacion("NO");
                listacuenta.add(dtc);
                } catch (ParseException ex) {
                Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                cuenta.setDetalle(listacuenta);
                
                Cuenta_ClienteJpaController ccjc=new Cuenta_ClienteJpaController(emf);
                ccjc.edit(cuenta);
                } catch (NonexistentEntityException ex) {
                Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                Logger.getLogger(JfVenta.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
                JfFactura ventana=new JfFactura();
                ventana.setVisible(true);
                }*/
                JOptionPane.showMessageDialog(rootPane, "La operacion se Realizo con exito");
                jButton10.setEnabled(true);
                jButton6.setEnabled(false);
                //Agrego para para q se registre el pago de la venta desde aca
                PagoCliente registrarPago=new PagoCliente();
                registrarPago.setAnulacion("NO");
                registrarPago.setFechapago(jXDatePicker1.getDate());
                registrarPago.setMonto(Float.parseFloat(jTextField8.getText()));
                registrarPago.setVenta(venta);
                PagoClienteJpaController pjc=new PagoClienteJpaController(emf);
                pjc.create(registrarPago);
                // Agrego para cargar la tabla de vuelta actualizada con el stock
                if(!jTextField1.getText().equals("")&&jTextField2.getText().equals("")){
                    buscarxProducto();
                }
                if(jTextField1.getText().equals("")&&jTextField2.getText().equals("")){
                    inicializarTablaProductoCombinado();
                }
                if(jTextField1.getText().equals("")&&!jTextField2.getText().equals("")){
                    buscarxCodigo();
                }
                bloquearBotones();
                //Cambio el estado de la mesa;
                MesaJpaController mjc=new MesaJpaController(emf);
                mesa.setCerrado(1);
                mjc.edit(mesa);
                ServicioMesaJpaController sjc=new ServicioMesaJpaController(emf);
                Date ahora=new Date();
                servicio.setFin(ahora);
                sjc.edit(servicio);
                //this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(CerrarMesas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else {JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un cliente para la venta");
        }

        
        //}
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(!jTextField2.getText().equals("")){
        buscarxProducto();
        //inicializarTablaComposicion();
        }else{
        inicializarTablaProductoCombinado();
        //inicializarTablaComposicion();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         if(!jTextField3.getText().equals("")){
        buscarxCodigo();
        //inicializarTablaComposicion();
        }
        else{
        inicializarTablaProductoCombinado();
        //inicializarTablaComposicion();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
       if(jTable1.getSelectedRow()!=-1){
       if(jTable1.getValueAt(jTable1.getSelectedRow(),4).toString().equals("SI")){
       EntityManagerFactory emf = Persistence.createEntityManagerFactory("pintureriaPU");  
       String valorTabla=(jTable1.getValueAt(jTable1.getSelectedRow(),0)).toString();
       Long valor=Long.parseLong(valorTabla);
       prodcomp=new ProductoCompuestoJpaController(emf).findProductoCompuesto(valor);
       escompuesto=1;
       llenarComposicion();
         jTextField4.setText("");
         jTextField5.setText("");
         jComboBox1.setEnabled(false);
       
       } 
       if(jTable1.getValueAt(jTable1.getSelectedRow(),4).toString().equals("NO")){
       EntityManagerFactory emf = Persistence.createEntityManagerFactory("pintureriaPU");  
       String valorTabla=(jTable1.getValueAt(jTable1.getSelectedRow(),0)).toString();
       Long valor=Long.parseLong(valorTabla);
      productoAlmacen=new AlmacenJpaController(emf).findAlmacen(valor);
      //inicializarTablaComposicion();
      escompuesto=0;
        llenarComboLocalizacion();
      //Pone las unidades en el area en caso de no haber echo click en el jcombo
        List<Localizacion> lista=new FacadeLocalizacion().buscarxdes(jComboBox1.getSelectedItem().toString(),String.valueOf(productoAlmacen.getId()));
        if(lista.size()!=0){
        Localizacion loc=lista.get(0);
        jTextField4.setText(String.valueOf(loc.getCantidad()));
        jTextField5.setText(String.valueOf(productoAlmacen.getCantidad()));
        }
      } 
       
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
       if(escompuesto==1){
        if(prodcomp!=null && !jTextField6.getText().equals("")){
         verificarContenido();
         if(listadescripcion.size()==0 && listadescripcion1.size()==0){
         EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
         Vector vector=new Vector();
         vector.add(prodcomp.getId());
         vector.add(prodcomp.getDescripcion());
         vector.add("NEGOCIO");
         vector.add(prodcomp.getPrecio());
         vector.add(jTextField6.getText());
         float resultado=(prodcomp.getPrecio()) * (Float.parseFloat(jTextField6.getText()));
         vector.add(resultado);
         vector.add("SI");
         //vector.add(jComboBox2.getSelectedItem().toString());
         modelo2.addRow(vector);
         jTable2.setModel(modelo2);
         calcularTotal();
         limpiarCampos();
         }else{
         jdVerComposicion ventana=new jdVerComposicion(new javax.swing.JFrame(), true, listadescripcion, listadescripcion1);
         ventana.setVisible(true);
         if(ventana.agregaventa==1){
         EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
         Vector vector=new Vector();
         vector.add(prodcomp.getId());
         vector.add(prodcomp.getDescripcion());
         vector.add("NEGOCIO");
         vector.add(prodcomp.getPrecio());
         vector.add(jTextField6.getText());
         float resultado=(prodcomp.getPrecio()) * (Float.parseFloat(jTextField6.getText()));
         vector.add(resultado);
         //vector.add(jTextField6.getText());
         //vector.add(jComboBox2.getSelectedItem().toString());
         modelo2.addRow(vector);
         jTable2.setModel(modelo2);
         calcularTotal();
         limpiarCampos();
         listadescripcion=null;
         listadescripcion1=null;
         }
         }
         
        }else{ JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un Producto Y especificar las cantidades");
        }
        
        }
        if(escompuesto==0){
       if(productoAlmacen!=null && !jTextField6.getText().equals("")){ 
       float unidadesDisponibles=Float.parseFloat(productoAlmacen.getCantidad());
       float unidadesRequeridas=Float.parseFloat(jTextField6.getText());
       
       //Pone las unidades en el area en caso de no haber echo click en el jcombo
        List<Localizacion> lista=new FacadeLocalizacion().buscarxdes(jComboBox1.getSelectedItem().toString(),String.valueOf(productoAlmacen.getId()));
        if(lista.size()!=0){
        Localizacion loc=lista.get(0);
        jTextField4.setText(String.valueOf(loc.getCantidad()));
        }
       float unidaesenArea=Float.parseFloat(jTextField4.getText());
        if(unidadesRequeridas <= unidadesDisponibles){
         if(unidadesRequeridas<=unidaesenArea){   
       Vector vector=new Vector();
       vector.add(productoAlmacen.getId());
       vector.add(productoAlmacen.getProducto().getDescripcion());
       //vector.add(productoAlmacen.getProducto().getTalle());
       vector.add(jComboBox1.getSelectedItem().toString());
       vector.add(productoAlmacen.getProducto().getPrecio().getPrecio_contado());
       vector.add(jTextField6.getText());
       float total=productoAlmacen.getProducto().getPrecio().getPrecio_contado()*Float.parseFloat(jTextField6.getText());
       vector.add(total);
       vector.add("NO");
       modelo2.addRow(vector);
       jTable2.setModel(modelo2);
       limpiarCampos();
       calcularTotal();
        }else{JOptionPane.showMessageDialog(rootPane, "Las unidades Requiridas son mayores a las disponible en esa Area");}
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Las unidades disponibles no cubren la demanda");
        }
         } else {JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un producto y especificar la cantidad a vender");
       }
        }
        llenarDetalleServicio();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
      int index=jTable2.getSelectedRow();
       modelo2.removeRow(index);
       jTable2.setModel(modelo2);
       limpiarCampos();
        calcularTotal();
       ActualizarDetalleServicio();                          
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        ActualizarMesa();
        DescartarMesa();
        this.dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
        for(int i=0; i<jTable2.getRowCount();i++){
        DetalleTicketCocina dt=new DetalleTicketCocina();
        dt.setProducto(jTable2.getValueAt(i, 1).toString());
        dt.setCantidad(jTable2.getValueAt(i, 4).toString());
        ldc.add(dt);
        }        
        Date hoy=new Date();
        TicketCocina ticket=new TicketCocina();
        ticket.setDt(ldc);
        ticket.setFecha(hoy);
        ticket.setHoraa(hoy);
        TicketCocinaJpaController tjc=new TicketCocinaJpaController(emf);
        tjc.create(ticket);
        
       for(int i=0; i<ldc.size();i++){
            try {
                DetalleTicketCocina dt=ldc.get(i);
                dt.setId_ticket(String.valueOf(ticket.getId()));
                DetalleTicketCocinaJpaController djc=new DetalleTicketCocinaJpaController(emf);
                djc.edit(dt);
                
            } catch (Exception ex) {
                Logger.getLogger(CerrarMesas.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
       this.setVisible(false);
        ejecutarReporte(ticket.getId());
        
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        if(facturaemitida==0){
            this.setVisible(false);
            JfFactura ventana=new JfFactura();
            ventana.setVisible(true);
            //this.setVisible(true);
            facturaemitida=ventana.emitido;
            jButton6.setEnabled(false);
        }
        if(facturaemitida==1){
            jButton6.setEnabled(false);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped
        // TODO add your handling code here:
        float k = (float) evt.getKeyChar(); 
      if (k >= 97 && k <= 122 || k >= 65 && k <= 90) { 
      evt.consume(); 
      JOptionPane.showMessageDialog(null, "No puede ingresar Letras!!!", "Error Datos", JOptionPane.ERROR_MESSAGE); 
      }
    }//GEN-LAST:event_jTextField6KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CerrarMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CerrarMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CerrarMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CerrarMesas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CerrarMesas dialog = new CerrarMesas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    // End of variables declaration//GEN-END:variables

    private void incializarComponentes() {
    llenarClienteGeneral();
    jTextField1.setEnabled(false);
    jTextField7.setEnabled(false);
    jXDatePicker1.setEnabled(false);
    jCheckBox1.setSelected(true);
    jTextField2.setEnabled(true);
    jTextField3.setEnabled(true);
    jTextField4.setEnabled(false);
    jTextField5.setEnabled(false);
    jTextField6.setEnabled(true);
    jXDatePicker1.setFormats("dd/MM/yyyy");
    Date hoy=new Date();
    jXDatePicker1.setDate(hoy);
    jTextField1.setText(String.valueOf(mesa.getNumero()));
    jTextField7.setText(servicio.getMozo());
    inicializarTablaProductoCombinado();
    if(servicio.getDetalle().size()==0){
    inicializarTabla2();
    }else{
    CargarConsumos();
    }
    inicializarTablaComposicion();
    }
    private void inicializarTablaProductoCombinado() {
    EntityManagerFactory emf= Persistence.createEntityManagerFactory("pintureriaPU");
        List<ProductoCompuesto> listaproducto= new FacadeProductoCombinado().listar();
        List<Almacen> listap= new FacadeAlmacen().buscarxnombre(jTextField2.getText().toUpperCase());
        DefaultTableModel modeloTabla=new DefaultTableModel();
        modeloTabla.addColumn("Id");
        modeloTabla.addColumn("Codigo");
        modeloTabla.addColumn("Producto");
        //modeloTabla.addColumn("Talle");
        //modeloTabla.addColumn("Proveedor");
        modeloTabla.addColumn("Precio");
        //modeloTabla.addColumn("Unidades Disponibles");
        modeloTabla.addColumn("Compuesto");
        
        
        for(int i=0; i<listaproducto.size(); i++){
        Vector vector=new Vector();
        vector.add(listaproducto.get(i).getId());
        vector.add(listaproducto.get(i).getCodigo());
        vector.add(listaproducto.get(i).getDescripcion());
       // vector.add(listaproducto.get(i).getProducto().getTalle());
       // vector.add(listaproducto.get(i).getProducto().getProveedor().getNombre());
       // vector.add(listaproducto.get(i).getProducto().getPrecio().getPrecio_contado());
        vector.add(listaproducto.get(i).getPrecio());
        vector.add("SI");
        //vector.add(listaproducto.get(i).getLocalizacion());
        modeloTabla.addRow(vector);
        }
        if(!jCheckBox1.isSelected()){
        for(int j=0; j<listap.size();j++){
        Vector vector=new Vector();
        vector.add(listap.get(j).getId());
        vector.add(listap.get(j).getProducto().getCod());
        vector.add(listap.get(j).getProducto().getDescripcion());
       // vector.add(listaproducto.get(i).getProducto().getTalle());
       // vector.add(listaproducto.get(i).getProducto().getProveedor().getNombre());
       // vector.add(listaproducto.get(i).getProducto().getPrecio().getPrecio_contado());
        vector.add(listap.get(j).getProducto().getPrecio().getPrecio_contado());
        vector.add("NO");
        //vector.add(listaproducto.get(i).getLocalizacion());
        modeloTabla.addRow(vector);
        }
        }
        jTable1.setModel(modeloTabla); 
    }
 private void buscarxProducto() {
    
       EntityManagerFactory emf= Persistence.createEntityManagerFactory("pintureriaPU");
        List<ProductoCompuesto> listaproducto= new FacadeProductoCombinado().buscarxDescripcion(jTextField2.getText().toUpperCase());
        List<Almacen> listap= new FacadeAlmacen().buscarxnombre(jTextField2.getText().toUpperCase());       
        DefaultTableModel modeloTabla=new DefaultTableModel();
        modeloTabla.addColumn("Id");
         modeloTabla.addColumn("Codigo");
        modeloTabla.addColumn("Producto");
        //modeloTabla.addColumn("Talle");
        //modeloTabla.addColumn("Proveedor");
        modeloTabla.addColumn("Precio");
        modeloTabla.addColumn("Compuesto");
        //modeloTabla.addColumn("Unidades Disponibles");
       // modeloTabla.addColumn("Localizacion");
        
        
        for(int i=0; i<listaproducto.size(); i++){
        Vector vector=new Vector();
        vector.add(listaproducto.get(i).getId());
        vector.add(listaproducto.get(i).getCodigo());
        vector.add(listaproducto.get(i).getDescripcion());
       // vector.add(listaproducto.get(i).getProducto().getTalle());
       // vector.add(listaproducto.get(i).getProducto().getProveedor().getNombre());
       // vector.add(listaproducto.get(i).getProducto().getPrecio().getPrecio_contado());
        vector.add(listaproducto.get(i).getPrecio());
        vector.add("SI");
        //vector.add(listaproducto.get(i).getLocalizacion());
        modeloTabla.addRow(vector);
        }
        if(!jCheckBox1.isSelected()){
         for(int j=0; j<listap.size();j++){
        Vector vector=new Vector();
        vector.add(listap.get(j).getId());
        vector.add(listap.get(j).getProducto().getCod());
        vector.add(listap.get(j).getProducto().getDescripcion());
       // vector.add(listaproducto.get(i).getProducto().getTalle());
       // vector.add(listaproducto.get(i).getProducto().getProveedor().getNombre());
       // vector.add(listaproducto.get(i).getProducto().getPrecio().getPrecio_contado());
        vector.add(listap.get(j).getProducto().getPrecio().getPrecio_contado());
        vector.add("NO");
        //vector.add(listaproducto.get(i).getLocalizacion());
        modeloTabla.addRow(vector);
        } 
        }
       
        
        jTable1.setModel(modeloTabla); 
    }
    
    private void buscarxCodigo() {
    EntityManagerFactory emf= Persistence.createEntityManagerFactory("pintureriaPU");
        List<ProductoCompuesto> listaproducto= new FacadeProductoCombinado().buscarxCod(Long.parseLong(jTextField3.getText()));
        List<Almacen> listap= new FacadeAlmacen().buscarxnombre(jTextField3.getText().toUpperCase());
        DefaultTableModel modeloTabla=new DefaultTableModel();
        modeloTabla.addColumn("Id");
        modeloTabla.addColumn("Codigo");
        modeloTabla.addColumn("Producto");
        //modeloTabla.addColumn("Talle");
        //modeloTabla.addColumn("Proveedor");
        modeloTabla.addColumn("Precio");
        //modeloTabla.addColumn("Unidades Disponibles");
        modeloTabla.addColumn("Compuesto");
        
        
        for(int i=0; i<listaproducto.size(); i++){
        Vector vector=new Vector();
        vector.add(listaproducto.get(i).getId());
        vector.add(listaproducto.get(i).getCodigo());
        vector.add(listaproducto.get(i).getDescripcion());
       // vector.add(listaproducto.get(i).getProducto().getTalle());
       // vector.add(listaproducto.get(i).getProducto().getProveedor().getNombre());
       // vector.add(listaproducto.get(i).getProducto().getPrecio().getPrecio_contado());
        vector.add(listaproducto.get(i).getPrecio());
        vector.add("SI");
        //vector.add(listaproducto.get(i).getLocalizacion());
        modeloTabla.addRow(vector);
        }
        if(!jCheckBox1.isSelected()){
        for(int j=0; j<listap.size();j++){
        Vector vector=new Vector();
        vector.add(listap.get(j).getId());
        vector.add(listap.get(j).getProducto().getCod());
        vector.add(listap.get(j).getProducto().getDescripcion());
       // vector.add(listaproducto.get(i).getProducto().getTalle());
       // vector.add(listaproducto.get(i).getProducto().getProveedor().getNombre());
       // vector.add(listaproducto.get(i).getProducto().getPrecio().getPrecio_contado());
        vector.add(listap.get(j).getProducto().getPrecio().getPrecio_contado());
        vector.add("NO");
        //vector.add(listaproducto.get(i).getLocalizacion());
        modeloTabla.addRow(vector);
        } 
        }
        jTable1.setModel(modeloTabla); 
    
    }
    private void llenarComboLocalizacion() {
     
    DefaultComboBoxModel modeloCombo = new DefaultComboBoxModel();
     List<Localizacion> lista;
     lista=new FacadeLocalizacion().buscarxAlmance(String.valueOf(productoAlmacen.getId()));
     if(lista.get(0).getId()!=null){
     for(int i=0;  i < lista.size(); i++){
      Vector vector = new Vector();
      vector.add(lista.get(i).getDescripcion());
      modeloCombo.addElement(lista.get(i).getDescripcion());
     }
       jComboBox1.setModel(modeloCombo);
     }
    }
    public void inicializarTabla2(){
       modelo2.addColumn("Id");
       modelo2.addColumn("Producto");
       //modelo2.addColumn("Talle");
       modelo2.addColumn("Proveedor");
       modelo2.addColumn("Precio");
       modelo2.addColumn("Cantidad");
       modelo2.addColumn("Total");
       modelo2.addColumn("Es compuesto");
       jTable2.setModel(modelo2);
    }
    
    private void llenarComposicion() {
       DefaultTableModel modelo=new DefaultTableModel();
       modelo.addColumn("Id");
       modelo.addColumn("Producto");
       modelo.addColumn("Proveedor");
       modelo.addColumn("Cantidad");
       modelo.addColumn("Unidad");
       modelo.addColumn("Excluyente");
       modelo.addColumn("Cantidad Disponibles en Alamacen");
       modelo.addColumn("Unidad");
        
        for(int i=0; i<prodcomp.getDetalle().size(); i++){
        Vector vector=new Vector();
        vector.add(prodcomp.getDetalle().get(i).getId());
        vector.add(prodcomp.getDetalle().get(i).getProducto().getDescripcion());
        vector.add(prodcomp.getDetalle().get(i).getProducto().getProveedor().getNombre());
        vector.add(prodcomp.getDetalle().get(i).getCantidad());
        vector.add(prodcomp.getDetalle().get(i).getProducto().getUnidad().getDescripcion());
        vector.add(prodcomp.getDetalle().get(i).getExcluyente());
        
         List<Almacen> prod=new FacadeAlmacen().buscarxid(prodcomp.getDetalle().get(i).getProducto().getId());
         vector.add(prod.get(0).getCantidad());
         vector.add(prod.get(0).getProducto().getUnidad().getDescripcion());
        //vector.add(prodcomp.getDetalle().get(i).());
        //vector.add(listaproducto.get(i).getLocalizacion());
        modelo.addRow(vector);
        }
        jTable3.setModel(modelo); 
    
    }
    
    public void inicializarTablaComposicion(){
 DefaultTableModel modelo=new DefaultTableModel();
       modelo.addColumn("Id");
       modelo.addColumn("Producto");
       modelo.addColumn("Proveedor");
       modelo.addColumn("Cantidad");
       modelo.addColumn("Unidad");
       modelo.addColumn("Excluyente");
       modelo.addColumn("Cantidad Disponibles en Alamacen");
       modelo.addColumn("Unidad");
jTable3.setModel(modelo);
}
    
     public void verificarContenido(){
     validaContenido=0;
     float cantidad=Float.parseFloat(jTextField6.getText());   
     for(int i=0; i<jTable3.getRowCount();i++){         
     String produ=jTable3.getValueAt(i, 1).toString();
     float cantidadesdisponibles=Float.parseFloat(jTable3.getValueAt(i, 6).toString());
     if(cantidadmaxima<=cantidadesdisponibles){
     cantidadmaxima=cantidadesdisponibles;
     }
     float cantidadcompisicion=Float.parseFloat(jTable3.getValueAt(i, 3).toString())*cantidad;
     String exc=jTable3.getValueAt(i, 5).toString();
     if(cantidadesdisponibles < cantidadcompisicion){
     if(exc.equals("N")){
     //validaprod=0;
      String descripcion=produ+":Cantidad disponible= "+cantidadesdisponibles+" no cubre la Demanda= "+cantidadcompisicion+"/n";   
      listadescripcion.add(descripcion);
     }else{
     validaContenido=1;
     String descripcion=produ+":Cantidad disponible= "+cantidadesdisponibles+" no cubre la Demanda= "+cantidadcompisicion;
     listadescripcion1.add(descripcion);
     }
     }
     }   
    
    }
    private void calcularTotal() {
    if(jTable2.getRowCount()>0){
    float total=0;    
    for(int i=0; i<jTable2.getRowCount();i++){
    float precio= Float.parseFloat(jTable2.getValueAt(i, 3).toString());
    float cantidad=Float.parseFloat(jTable2.getValueAt(i, 4).toString());
    float calculo= precio*cantidad;
    total=total+calculo;
    }
    jTextField8.setText(String.valueOf(total));    
    }else{jTextField8.setText(String.valueOf(0));} 
    
    }

    private void limpiarCampos() {
    //jTextField1.setText("");
    //jTextField2.setText("");
    jTextField6.setText("");
    }

    private void llenarDetalleServicio() {
        try {
            EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
            List<DetalleServicioMesa>listadetalle=new ArrayList<>();
            for(int i=0;i<jTable2.getRowCount();i++){
                DetalleServicioMesa detalle=new DetalleServicioMesa();
                detalle.setProducto(jTable2.getValueAt(i, 1).toString());
                detalle.setCantidad(Integer.parseInt(jTable2.getValueAt(i, 4).toString()));
                detalle.setMonto(Float.parseFloat(jTable2.getValueAt(i, 3).toString()));
                detalle.setEstado("CERRADO");
                detalle.setCompuesto(jTable2.getValueAt(i, 6).toString());
                detalle.setProveedor(jTable2.getValueAt(i, 3).toString());
                detalle.setIdprodcuto(Long.parseLong(jTable2.getValueAt(i, 0).toString()));
                listadetalle.add(detalle);
            }
            //Seteo lo que tiene la tabla al Servicio
            ServicioMesaJpaController sjc=new ServicioMesaJpaController(emf);
            servicio.setDetalle(listadetalle);
            sjc.edit(servicio);
        } catch (Exception ex) {
            Logger.getLogger(CerrarMesas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ActualizarDetalleServicio() {
        try {
            EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureria");
            List<DetalleServicioMesa>listadetalle=new ArrayList<>();
            for(int i=0;i<jTable2.getRowCount();i++){
                DetalleServicioMesa detalle=new DetalleServicioMesa();
                detalle.setProducto(jTable2.getValueAt(i, 1).toString());
                detalle.setCantidad(Integer.parseInt(jTable2.getValueAt(i, 4).toString()));
                detalle.setMonto(Float.parseFloat(jTable2.getValueAt(i, 3).toString()));
                detalle.setEstado("CERRADO");
                listadetalle.add(detalle);
            }
            //Seteo lo que tiene la tabla al Servicio
            ServicioMesaJpaController sjc=new ServicioMesaJpaController(emf);
            servicio.setDetalle(listadetalle);
            sjc.edit(servicio);
        } catch (Exception ex) {
            Logger.getLogger(CerrarMesas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    
    }

    private void CargarConsumos() {
        
       modelo2=new DefaultTableModel();
       modelo2.addColumn("Id");
       modelo2.addColumn("Producto");
       //modelo2.addColumn("Talle");
       modelo2.addColumn("Proveedor");
       modelo2.addColumn("Precio");
       modelo2.addColumn("Cantidad");
       modelo2.addColumn("Total");
       modelo2.addColumn("Es compuesto");
       
       
       for(int i=0; i<servicio.getDetalle().size();i++){
         Vector vector=new Vector();
         vector.add(servicio.getDetalle().get(i).getIdprodcuto());         
         vector.add(servicio.getDetalle().get(i).getProducto());
         vector.add("NEGOCIO");
         vector.add(servicio.getDetalle().get(i).getMonto());
         vector.add(servicio.getDetalle().get(i).getCantidad());
         vector.add(servicio.getDetalle().get(i).getMonto() * servicio.getDetalle().get(i).getCantidad() );
         vector.add(servicio.getDetalle().get(i).getCompuesto());
         modelo2.addRow(vector);
       }
       jTable2.setModel(modelo2);
       calcularTotal();
    }

    private void ActualizarMesa() {
        try {
            EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
            mesa.setCerrado(1);
            MesaJpaController mjc=new MesaJpaController(emf);
            mjc.edit(mesa);
        } catch (Exception ex) {
            Logger.getLogger(CerrarMesas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void DescartarMesa() {
    EntityManagerFactory emf=Persistence.createEntityManagerFactory("pintureriaPU");
    ServicioMesaJpaController sjc=new ServicioMesaJpaController(emf);
        try {
            sjc.destroy(servicio.getId());
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(CerrarMesas.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
       private void ejecutarReporte(long ticket) {
    try {
        Reporte reporte=new Reporte();   
        reporte.ejecutarReporteCocina(ticket);
    } catch (JRException ex) {
        Logger.getLogger(JfFactura.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        Logger.getLogger(JfFactura.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        Logger.getLogger(JfFactura.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

        private void llenarClienteGeneral() {
    List<Cliente> lcliente=new FacadeCliente().buscarxnombre("CLIENTE", "GENERAL");
    cliente=lcliente.get(0);    
    }

    private void bloquearBotones() {
    
    }
}
